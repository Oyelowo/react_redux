{
  "_args": [
    [
      {
        "raw": "react-html-id",
        "scope": null,
        "escapedName": "react-html-id",
        "name": "react-html-id",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\oyeda\\Desktop\\webDev\\js_code_snippet\\react_redux"
    ]
  ],
  "_from": "react-html-id@latest",
  "_id": "react-html-id@0.1.2",
  "_inCache": true,
  "_location": "/react-html-id",
  "_nodeVersion": "9.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-html-id-0.1.2.tgz_1516117966028_0.49324114178307354"
  },
  "_npmUser": {
    "name": "hjnilsson",
    "email": "mail@hjnilsson.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-html-id",
    "scope": null,
    "escapedName": "react-html-id",
    "name": "react-html-id",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-html-id/-/react-html-id-0.1.2.tgz",
  "_shasum": "15d9adc4837d55dd27476056a08d02a26bd39c05",
  "_shrinkwrap": null,
  "_spec": "react-html-id",
  "_where": "C:\\Users\\oyeda\\Desktop\\webDev\\js_code_snippet\\react_redux",
  "author": {
    "name": "Hampus Nilsson"
  },
  "bugs": {
    "url": "https://github.com/hjnilsson/react-html-id/issues"
  },
  "dependencies": {},
  "description": "A utility package that provides consistent unique html IDs for react components. This package has no dependencies.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-JZn24L2hbZRhpfHeuMue9dQcOvRQMlvvQTYyp7PjIv2WzPyYrN+tW3sTbSMZn5juMAqcA4dvJidjwMk9BNHFKg==",
    "shasum": "15d9adc4837d55dd27476056a08d02a26bd39c05",
    "tarball": "https://registry.npmjs.org/react-html-id/-/react-html-id-0.1.2.tgz"
  },
  "gitHead": "925fa09ad7bf49fdf215e26d79456af94dcf96bf",
  "homepage": "https://github.com/hjnilsson/react-html-id#readme",
  "keywords": [
    "react",
    "id",
    "htmlid",
    "uniqid",
    "unique",
    "id"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hjnilsson",
      "email": "mail@hjnilsson.com"
    }
  ],
  "name": "react-html-id",
  "optionalDependencies": {},
  "readme": "# react-html-id\nA npm package that allows you to use unique html IDs for components\nwithout any dependencies on other libraries (obviously, you need to\nuse React in your project).\n\n## Purpose\n\nThis module allows you to set unique `id` tags on React HTML elements,\nmainly in order to connect labels to them but also for other HTML function\nthat require unique ids (`#references`).\n\n## Usage\n\nTo use the module, you first need to inject the extension into\nyour component. You do this via the `enableUniqueIds` function\n(which is the only function exposed by this module). Then you\ncan use `this.nextUniqueId()` to get a new identifier,\n`this.lastUniqueId()` to refer to that identifier again in the HTML,\nand `this.getUniqueId('name')` to get an identifier by name.\n\n    class MyComponent {\n        constructor() {\n            super()\n\n            enableUniqueIds(this)\n        }\n\n        render () {\n            // Use nextUniqueId to create a new ID, and lastUniqueId to refer to the same ID again\n            return (\n                <div className=\"form-group\">\n                    <label htmlFor={this.nextUniqueId()}>Name</label>\n                    <input id={this.lastUniqueId()}\n                           type=\"text\"\n                           className=\"control\" />\n                </div>\n            )\n        }\n    }\n\n### Why can't I just use a counter?\n\nThe problem with using a local counter in the render function is\nthat the *IDs will not be unique between different instance*.\n\n    class BadComponent {\n        render () {\n            var idCounter = 0;\n\n            // Do not do this!!\n            return (\n                <div className=\"form-group\">\n                    <label htmlFor={'id-' + idCounter}>Name</label>\n                    <input id={'id-' + idCounter}\n                           type=\"text\"\n                           className=\"control\" />\n                </div>\n            )\n        }\n    }\n\nIf you put two instances of `BadComponent` in your React application,\nthey will both share the same IDs! This package ensures you will get\nunique IDs per instance of every component.\n\n### Does this work with server side rendering?\n\nIf you render your UI on the server in it's own process per request, you\ndo not need to anything extra, because the result of rendering will be\nidentical across the server and the client.\n\nHowever, if you render multiple different React components on the server\nusing `renderToString`, you need to reset the unique ID counter between\neach request to result in the same IDs being generated for the client,\nyou do this using the `resetUniqueIds()` API.\n\nThis only works on first-site load. If you request dynamic DOM from\nthe server that is placed on the page and then mounted, this library\nwill be insufficient to solve your problem. There is no simple way\nof guaranteeing that the ID counter is consistent between the server\nand the client.\n\n## API\n\n### enableUniqueIds(component, [instanceId])\n\nThis should be called from the constructor of the component that needs unique IDs,\npassing `this` as the first parameter. After calling this you can use `nextUniqueId`, `lastUniqueId` and `getUniqueId`\nby invoking them on `this`.\n\nThis call either adds a `componentWillUpdate` handler to the current component,\nor wraps the existing one. The package uses `componentWillUpdate` to reset the\nID counter every time the component re-renders.\n\n    class MyComponent {\n        constructor() {\n            super()\n\n            // Enable Unique ID support for this class\n            enableUniqueIds(this)\n        }\n\n        render() {\n            // ...\n        }\n    }\n\nThe second optional `instanceId` parameter specifies a string to use for _all_ instances of this component when\nconstructing unique IDs, as opposed to using a unique string for each instance. While this essentially defeats the\npurpose of this module when there are multiple instances of your component on the page, it's useful for snapshot-based\nunit testing, e.g. [Storyshots](https://github.com/storybooks/storybook/tree/master/addons/storyshots), where the\nindeterminate nature of test execution order might generaate different unique IDs on each test run. In this case, you'll\nlikely want want to only use it when you're actually running the unit tests:\n\n    enableUniqueIds(this, (process.env.NODE_ENV === 'test') ? props.name : undefined)\n\n### Component.nextUniqueId()\n\nThis will returns a *new* unique id for the component. Repeatedly calling\nthis function will result in new IDs.\n\nIDs are consistent between renders, as long as the function is always called\nin the same order. This means there are *no DOM updates* necessary if you do\nnot remove calls to the function between renders.\n\n    render() {\n        var manyFields = ['firstName', 'lastName', 'address', 'postalCode', 'city']\n        \n        // Every label-input pair will have a unique ID \n        return (\n            <form>\n                {manyFields.map((field, index) => {\n                    return (\n                        <div className=\"form-group\" key={index}>\n                            <label htmlFor={this.nextUniqueId()}>Name</label>\n                            <input id={this.lastUniqueId()}\n                                type=\"text\"\n                                className=\"control\" />\n                        </div>\n                    )\n                })\n            </form>\n        )\n    }\n\n### Component.lastUniqueId()\n\nReturns the same ID that was returned by the last call to `nextUniqueId`,\nthis is almost always necessary as you need to refer to the ID twice, once\nfor the label and once for the input.\n\n### Component.getUniqueId(identifier : String) \n\nThis always returns the same unique identifier, given the same name. \nThis is useful if the order of components makes it impossible or confusing \nto use `lastUniqueId` to refer to a component.\n\n    render() {\n        return (\n            <div className=\"form-group\">\n                <label htmlFor={this.getUniqueId('input')}>Name</label>\n                <div className=\"help-block\"\n                        id={this.getUniqueId('help')}>\n                    This should be your full name.\n                </div>\n                <input id={this.getUniqueId('input')}\n                        type=\"text\"\n                        aria-describedby={this.getUniqueId('help')}\n                        className=\"control\" />\n            </div>\n        )\n    }\n\nYou can of course also store the result of `nextUniqueId` into a variable\nto acheive the same result.\n\n### resetUniqueIds()\n\nThis resets the per-component counter of unique IDs. Call this before using\n`renderToString` on the **server**. This should *never* be called on the client.\n\n    // Call before renderToString to reset the global ID counter\n    function renderAppServerSide(appProps) {\n        ReactHtmlId.resetUniqueIds()\n        ReactDOM.renderToString(<App props={...} />);\n    }\n\n## Credits\n\nThis package is brought to you by [Hampus Nilsson](https://hjnilsson.com).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hjnilsson/react-html-id.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.2"
}
