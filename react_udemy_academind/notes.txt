class Human {
  constructor(){
    this.gender = 'female'
  }
  
  printGender(){
    console.log(this.gender)
  }
}


class Person extends Human{
  constructor(){
    super();
    this.name = 'lowo';
    this.gender= 'male';
  }
  
  printName(){
    console.log(this.name);
  }
}


const boy = new Person();

// boy.printName();
// boy.printGender(); 
console.log(boy.gender)





NEXT GENERATION JAVASCRIPT, WITHOUT USING CONSTRUCTOR BUT ARROW FUNCTION.
class Human {
   gender = 'female'  
  printGender = () => {
    console.log(this.gender);
  }
}


class Person extends Human{
    name = 'lowo';
    gender= 'male';
    printName = () => {
    console.log(this.name);
  }
}


const boy = new Person();

boy.printName();
boy.printGender(); 
console.log(boy.gender)




SPREAD AND REST OPERATORS.
const num1 = [1,2,3];
const num2 = [...num1, 5, 7];

// this takes the array as one element and does not pull out the values
// const num2 = [num1, 5, 7];

console.log(num2)

const person = {
  name: 'lowo',
  age: 23
}

const newMan = {
  ...person,
  interest: 'coding'
}

console.log(newMan).


REST OPERATOR.
const filterNum = (...args) => {
  return args.filter(el => el > 3);
}

 console.log(filterNum(1,3, 553, 642, '44' ,52,1));



ARRAY DESTRUCTURING.
const nums = [1,2,3];

[num1, num2] = nums;

console.log(num1, num2);

// if I need to skip num2 and take 3, I can just omit it and separate with coma
[num1, ,num3] = nums;

console.log(num1, num3);
